# Tutorial
Header1=Arguments :

Option1=-h(elp) [command] for general syntax or command syntax
Option2=-noDao to invalidate database access (MUST BE FIRST ARGUMENT)
Option3=-verbose for processing traces
Option4=-i(nteractive) switch to interactive mode
Option5=-f(ile) [fileName] : read commands in file
Option5_1=only one command by line
Option5_2=c(ommand) argument is implicit
Option5_3=arguments with whitespaces must be doublequoted
Option5_4=lines started with # are comments

Option6=-migrate_schema to update data from previous schema (sql script must be previouly executed)

Option7=-o(bject) neptuneObjectName (default object for following commands)
Option8=-c(ommand) [commandName] : see below

Footer1=Notes:
Footer1_1=-c(ommand) can be chained : new occurence of command must be followed by it's specific argument
Footer1_1_1=last returned objects of reading commands are send to command witch needs objects as input
Footer1_2=-o(bject) argument may be added for each command to switch object types, switch is conserved on further commands

Commands=add checkObjectId complete delete exec export exportForDeletion get getDeletionExportFormats getExportFormats getImportFormats help import include info lang new print quit remove save set validate verbose

add=add : add value or reference for any collection of attribute on single loaded object
add_1=-attr attributeName value : when attribute is a list of standard values
add_1_1=attributeName : attribute name
add_1_2=newValue : new value to add
add_1_2_1=if value is a date, it must be in one of these 3 formats :
add_1_2_1_1=yyyy-MM-dd
add_1_2_1_2=yyyy-MM-dd_HH:mm:ss
add_1_2_1_3=HH:mm:ss
add_2=-ref attributeName referenceId : when attribute is a list of Neptune objects
add_2_1=referenceId NeptuneId of the existing Neptune Object to add
add_n=This command can be used only if one bean is loaded

checkObjectId=checkObjectId : check if Neptune object ID are Norm compilants
checkObjectId_1=-sqlfile filename : sql script file prepared to correct wrong objectIds (default : invalid.sql)
checkObjectId_2=-checkType : uncomment update commands in file
checkObjectId_3=-objectidprefix prefix : force prefix on objectid (default : system.code in chouette.properties)

complete=complete \: complete the model of last read Neptune objects 

delete=delete : delete from database last read Neptune objects
delete_1=-propagate \: to propagate deletion on non mandatory references 

exec=exec -f fileName : execute commands from a script file (only in interactive mode)

exit=exit (or q(uit) : terminate interactive session or script

export=export : write Neptune Objects to file
export_1=-format formatName : format name
export_2=launch getExportFormats for other parameters

exportForDeletion=exportForDeletion : write Neptune Delete information for Objects to file
exportForDeletion_1=-format formatName : format name
exportForDeletion_2=launch getDeletionExportFormats for other parameters

get=get : read Neptune Object from database
get_1=-o(bject) neptuneObjectName : fix or change object type
get_2=-id [value+] : object technical id
get_3=-objectId [value+] : object neptune id
get_4=-filter [filterargs]+ : filter clause
get_4_1=attribute = attribute to filter : may be nested (ptnetwork.objectid on line for example)
get_4_2=operator : null, eq or =, like, in (others will be addeD in future)
get_4_3=value : optional values depending on operator
get_5=-orderBy [value+] : sort fields
get_6=-asc|-desc sort order (default = asc)
get_7=-limit value|none (default = 10)

getDeletionExportFormats=getDeletionExportFormats : print available export formats for deletion and arguments
getDeletionExportFormats_1=-o(bject) neptuneObjectName : fix or change object type

getExportFormats=getExportFormats : print available export formats and arguments
getExportFormats_1=-o(bject) neptuneObjectName : fix or change object type

getImportFormats=getImportFormats : print available import formats and arguments
getImportFormats_1=-o(bject) neptuneObjectName : fix or change object type

help=help -cmd commandName : details on commandName (only in interactive mode)

import=import : read Neptune Objects from file
import_1=launch getImportFormats for other parameters

include=include -f fileName : insert commands from another file in file script (only with -f(ile) argument)

info=info : show attributes for active object type
info_1=-o(bject) neptuneObjectName : fix or change object type

lang=lang -fr|-en : switch message language

new=new : create a new instance from scratch
new_1=-o(bject) neptuneObjectName : fix or change object type

print=print : print previously read Neptune Objects
print_1=-l(evel) level : deep level for recursive print (default = 0)

quit=q(uit) (or exit): terminate interactive session or script

remove=remove : remove value or reference for any collection of attribute on single loaded object
remove_1=-attr attributeName value : when attribute is a list of standard values
remove_1_1=attributeName : attribute name
remove_1_2=value : new value to remove
remove_1_2_1=if value is a date, it must be in one of these 3 formats :
remove_1_2_1_1=yyyy-MM-dd
remove_1_2_1_2=yyyy-MM-dd_HH:mm:ss
remove_1_2_1_3=HH:mm:ss
remove_2=-ref attributeName referenceId : when attribute is a list of Neptune objects
remove_2_1=referenceId NeptuneId of the Neptune Object to remove
remove_n=This command can be used only if one bean is loaded

save=save : save last readed Neptune objects

set=set : set value or reference for any attribute on single loaded object
set_1=-attr attributeName newValue : when attribute is a standard value
set_1_1=attributeName : attribute name
set_1_2=newValue : new value to set (omit to unset)
set_1_2_1=if value is a date, it must be in one of these 3 formats :
set_1_2_1_1=yyyy-MM-dd
set_1_2_1_2=yyyy-MM-dd_HH:mm:ss
set_1_2_1_3=HH:mm:ss
set_2=-ref attributeName referenceId : when attribute is a Neptune objects
set_2_1=referenceId NeptuneId of the existing Neptune Object to refer (omit to unset)
set_n=This command can be used only if one bean is loaded

validate=validate : launch validation process on previously readed NeptuneObject
validate_1=-file filename : save result in file
validate_1_1=filename : result file name
validate_2=-append : add result at end of file

verbose=verbose -on/-off : switch verbose mode
