# Tutorial
Header1=Arguments :

Option1=-h(elp) [command] pour l'aide générale ou sur une commande
Option2=-noDao pour ne pas activer l'accès à une base donnée (doit impérativement être le premier argument)
Option3=-verbose pour activer des traces des commandes
Option4=-i(nteractive) passer en mode interactif
Option5=-f(ile) [fileName] \: ex\u00E9cute les commandes depuis un fichier texte \: 
Option5_1=une command par ligne
Option5_2=l'argument -c(ommand) est implicite
Option5_3=les arguments des commandes contenant des espaces doivent être entre guillements
Option5_4=les lignes commençant par # sont des commentaires

Option6=-migrate_schema pour migrer les données à partir d'une version précédente (le script sql doit avoir été exécuté préalablement)

Option7=-o(bject) neptuneObjectName fixe le type d'objet pour les commandes suivantes
Option8=-c(ommand) [commandName] \: voir ci dessous 

Footer1=Notes:
Footer1_1=les commandes -c(ommand) peuvent être chainées  : chaque nouvelle commande doit être suivie de ses arguments
Footer1_1_1=les derniers objets récupérés par une commande sont transmis à la suivante
Footer1_2=l'option -o(bject) peut \u00EAtre ajout\u00E9e pour changer de type d'objet 
Footer1_2_1=le nouveau type est conservé ensuite tant qu'il n'y a pas de nouveau changement

Commands=add checkObjectId complete delete exec export exportForDeletion get getDeletionExportFormats getExportFormats getImportFormats help import include info lang new print quit remove save set validate verbose

add=add : ajoute une valeur ou une référence d'objet à un attribut de type liste sur le dernier objet chargé
add_1=-attr attributeName value : pour ajouter une valeur simple
add_1_1=attributeName : nom de l'attribut
add_1_2=newValue : valeur à ajouter
add_1_2_1=si la valeur est une date, elle doit respecter l'un des 3 formats suivants :
add_1_2_1_1=yyyy-MM-dd
add_1_2_1_2=yyyy-MM-dd_HH:mm:ss
add_1_2_1_3=HH:mm:ss
add_2=-ref attributeName referenceId : pour ajouter une référence à un autre objet Neptune
add_2_1=referenceId : identifiant Neptune d'un objet existant dans la base
add_n=Cette command ne peut être utilisée que si un seul objet est chargé en mémoire

checkObjectId=checkObjectId \: v\u00E9rifie si les identifiants neptune sont conforme \u00E0 la norme
checkObjectId_1=-sqlfile filename : fichier sql g\u00E9n\u00E9r\u00E9 pour modifier les id invalides (par d\u00E9faut : invalid.sql)
checkObjectId_2=-checkType : précise si les commandes g\u00E9n\u00E9r\u00E9es sont comment\u00E9es ou non
checkObjectId_3=-objectidprefix prefix : impose un pr\u00E9fixe d'identifiant (par d\u00E9faut : system.code dans chouette.properties)

complete=complete : complète le modèle sur les objets chargés en mémoire

delete=delete : supprime de la base les derniers objets chargés en mémoire
delete_1=-propagate \: propage la suppression au dela des objets structurellement li\u00E9s.

exec=exec -f fileName : exécute les commandes depuis un fichier script (mode interactif)

exit=exit (or q(uit) : termine la session interactive ou le script

export=export : export les objets Neptune en mémoire vers un fichier
export_1=-format formatName : nom du format d'export
export_2=utiliser getExportFormats pour avoir la liste des formats d'export et le d\u00E9tail de leur param\u00E8tres 

exportForDeletion=exportForDeletion : export l'information de suppression des objets Neptune en mémoire vers un fichier
exportForDeletion_1=-format formatName : nom du format d'export
exportForDeletion_2=utiliser getDeletionExportFormats pour avoir la liste des formats d'export et le d\u00E9tail de leur param\u00E8tres 

get=get : charge des objets Neptune depuis la base
get_1=-o(bject) neptuneObjectName : (re)définit le type d'objet
get_2=-id [value+] : identifiant technique (base) de l'objet
get_3=-objectId [value+] : identifiant Neptune de l'objet
get_4=-filter [filterargs]+ : filtre sur attributs :
get_4_1=attribute = attribut du filtre : peut être chainé (Par exemple ptnetwork.objectid pour avoir les lignes d'un réseau)
get_4_2=operator : null, eq or =, like, in (d'autres opérateurs seront ajoutés à l'avenir)
get_4_3=value : valeur de filtre selon opérateur
get_5=-orderBy [value+] \: tri sur attribut 
get_6=-asc|-desc ordonancement (defaut = asc)
get_7=-limit value|none (defaut \= 10) 

getDeletionExportFormats=getDeletionExportFormats : retourne la liste des formats d'export pour suppression disponible ainsi que les paramètres de chacun
getDeletionExportFormats_1=-o(bject) neptuneObjectName : : (re)définit le type d'objet

getExportFormats=getExportFormats : retourne la liste des formats d'export disponible ainsi que les paramètres de chacun
getExportFormats_1=-o(bject) neptuneObjectName : : (re)définit le type d'objet

getImportFormats=getImportFormats : retourne la liste des formats d'import disponible ainsi que les paramètres de chacun
getImportFormats_1=-o(bject) neptuneObjectName : : (re)définit le type d'objet

help=help -cmd commandName : détail des options d'une commande (modeinteractif)

import=import \: charge des objets Neptune en m\u00E9moire depuis un fichier d'import 
import_1=-format formatName : nom du format d'import
import_2=utiliser getImportFormats pour avoir la liste des formats d'import et le d\u00E9tail de leur param\u00E8tres 

include=include -f fileName : insert un fichier script dans une autre (mode Script)

info=info : affiche les attributs disponibles sur un type d'objet Neptune
info_1=-o(bject) neptuneObjectName : : (re)définit le type d'objet

lang=lang -fr|-en \: fixe la langue des messages 

new=new : crée un nouvel objet Neptune en mémoire
new_1=-o(bject) neptuneObjectName : : (re)définit le type d'objet

print=print : affiche les attributs des objets en mémoire
print_1=-l(evel) level : profondeur d'affichage (defaut = 0 = attributs directs uniquement)

quit=q(uit) (or exit): termine la session interactive ou le script

remove=remove : retire une valeur ou une référence d'un attribut de type list sur l'objet Neptune en mémoire
remove_1=-attr attributeName value : pour retirer une valeur simple
remove_1_1=attributeName : nom de l'attribut
remove_1_2=value : valeur à retirer
remove_1_2_1=si la valeur est une date, elle doit respecter l'un des 3 formats suivants :
remove_1_2_1_1=yyyy-MM-dd
remove_1_2_1_2=yyyy-MM-dd_HH:mm:ss
remove_1_2_1_3=HH:mm:ss
remove_2=-ref attributeName referenceId : pour retirer une référence à un autre objet Neptune
remove_2_1=referenceId identifiant Neptune d'un objet existant dans la base
remove_n=Cette command ne peut être utilisée que si un seul objet est chargé en mémoire

save=save : sauve les objets Neptune en mémoire dans la base

set=set : fixe la valeur d'un attribut de cardinalité 1 sur l'objet Neptune en mémoire
set_1=-attr attributeName newValue : pour modifier une valeur simple
set_1_1=attributeName : nom de l'attribut
set_1_2=newValue : nouvelle valeur (optionnel : absent pour retirer la valeur)
set_1_2_1=si la valeur est une date, elle doit respecter l'un des 3 formats suivants :
set_1_2_1_1=yyyy-MM-dd
set_1_2_1_2=yyyy-MM-dd_HH:mm:ss
set_1_2_1_3=HH:mm:ss
set_2=-ref attributeName referenceId : pour modifier une référence à un autre objet Neptune
set_2_1=referenceId identifiant Neptune d'un objet existant dans la base (optionnel : absent pour retirer la référence)
set_n=Cette command ne peut être utilisée que si un seul objet est chargé en mémoire

validate=validate : lance le processus de validation sur les objets Neptune en mémoire
validate_1=-file filename : pour sauver le résultat dans un fichier
validate_1_1=filename : nom du fichier résultat
validate_2=-append : ajoute le résultat en fin de fichier

verbose=verbose -on/-off : bascule le mode verbeux
